# Finding Duplicates in a SQL Table

## Introduction
Finding duplicate records in a table is a common SQL task. Duplicates can exist in one or multiple columns and can be identified using `GROUP BY`, `HAVING`, `JOIN`, or `ROW_NUMBER()`.

## 1. Finding Duplicates Based on a Single Column
If duplicates are identified based on a single column (e.g., `email` in a `Users` table):

```sql
SELECT email, COUNT(*) AS duplicate_count
FROM Users
GROUP BY email
HAVING COUNT(*) > 1;
```

### Explanation:
- Groups records by `email`.
- Uses `HAVING COUNT(*) > 1` to filter only duplicate emails.

## 2. Finding Duplicates Based on Multiple Columns
If duplicates are determined based on more than one column (e.g., `first_name` and `last_name`):

```sql
SELECT first_name, last_name, COUNT(*) AS duplicate_count
FROM Users
GROUP BY first_name, last_name
HAVING COUNT(*) > 1;
```

## 3. Finding Duplicate Rows with All Columns
To check for completely identical rows:

```sql
SELECT *, COUNT(*) AS duplicate_count
FROM Users
GROUP BY first_name, last_name, email, phone
HAVING COUNT(*) > 1;
```

## 4. Finding Duplicate Records with IDs
To retrieve duplicate records along with their `id` values:

```sql
SELECT u1.*
FROM Users u1
JOIN (
    SELECT email
    FROM Users
    GROUP BY email
    HAVING COUNT(*) > 1
) u2
ON u1.email = u2.email
ORDER BY u1.email;
```

## 5. Deleting Duplicate Rows (Keeping One)
To delete duplicates but keep one unique entry:

```sql
DELETE FROM Users
WHERE id NOT IN (
    SELECT MIN(id)
    FROM Users
    GROUP BY email
);
```

### Explanation:
- The subquery selects the smallest `id` for each duplicate group and keeps only the first occurrence.

## Conclusion
Identifying and handling duplicate records is essential for maintaining data integrity in SQL. By using `GROUP BY`, `HAVING`, `JOIN`, or `ROW_NUMBER()`, you can effectively detect and manage duplicates in a table.





# Swapping Genders in an SQL Table

## Problem Statement
Given a table with a `Gender` column containing values such as 'Male' and 'Female', write an SQL query to swap the gender values, converting 'Male' to 'Female' and 'Female' to 'Male'.

## Example Table: `Employees`
| EmployeeID | Name   | Gender  |
|------------|--------|---------|
| 1          | Alice  | Female  |
| 2          | Bob    | Male    |
| 3          | Carol  | Female  |
| 4          | David  | Male    |

## Expected Output (After Swapping Genders)
| EmployeeID | Name   | Gender  |
|------------|--------|---------|
| 1          | Alice  | Male    |
| 2          | Bob    | Female  |
| 3          | Carol  | Male    |
| 4          | David  | Female  |






## SQL Query to Swap Genders
```sql
UPDATE Employees
SET Gender = CASE 
    WHEN Gender = 'Male' THEN 'Female'
    WHEN Gender = 'Female' THEN 'Male'
    ELSE Gender 
END;
```

## Explanation
- The `CASE` statement checks the value of the `Gender` column:
  - If it is 'Male', it updates it to 'Female'.
  - If it is 'Female', it updates it to 'Male'.
  - If the value is something else (e.g., NULL or other values), it remains unchanged.

## When to Use
- When you need to swap categorical values in a table efficiently.
- Useful in data correction and transformation tasks.
- Helps in testing scenarios where opposite gender data needs to be analyzed.

## Precaution
- Always take a backup before performing `UPDATE` operations.
- Use `SELECT * FROM Employees;` before and after execution to verify changes.





# Finding Employees with Salaries Greater Than Their Manager

## Problem Statement
Given an `Employees` table where each employee has a `ManagerID`, write an SQL query to find employees whose salary is greater than their respective manager's salary.

## Example Table: `Employees`
| EmployeeID | Name   | Salary | ManagerID |
|------------|--------|--------|-----------|
| 1          | Alice  | 90000  | NULL      |
| 2          | Bob    | 60000  | 1         |
| 3          | Carol  | 120000 | 1         |
| 4          | David  | 70000  | 2         |
| 5          | Eve    | 80000  | 2         |

## Expected Output
| EmployeeID | Name   | Salary | ManagerID |
|------------|--------|--------|-----------|
| 3          | Carol  | 120000 | 1         |
| 5          | Eve    | 80000  | 2         |

## SQL Query Using Self-Join
```sql
SELECT e.EmployeeID, e.Name, e.Salary, e.ManagerID
FROM Employees e
JOIN Employees m ON e.ManagerID = m.EmployeeID
WHERE e.Salary > m.Salary;
```

## Explanation
- The `Employees` table is joined with itself (`self-join`), treating one instance as the employee (`e`) and the other as the manager (`m`).
- The `JOIN` condition `e.ManagerID = m.EmployeeID` ensures that we are comparing an employee’s salary with their direct manager.
- The `WHERE` clause filters only those employees whose salary is greater than their manager’s salary.

## When to Use
- To analyze salary distributions and detect anomalies in hierarchical salary structures.
- Useful in HR analytics for ensuring fair pay scales.
- Can be extended to find employees earning more than a certain percentage of their manager's salary.

## Precaution
- Ensure that `ManagerID` values exist in `EmployeeID` to avoid `NULL` joins.
- If `ManagerID` can be `NULL`, consider handling it using `LEFT JOIN` or filtering out `NULL` values in the `WHERE` clause.
